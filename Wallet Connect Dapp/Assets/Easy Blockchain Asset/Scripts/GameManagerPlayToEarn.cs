using System.Numerics;

using UnityEngine;

using Nethereum.Contracts;
using Nethereum.ABI.FunctionEncoding.Attributes;

// PlayToEarnContractEditor used methods
public class StandardPlayToEarnContractDeployment : ContractDeploymentMessage
{
    public static string BYTECODE =
        "608060405234801561001057600080fd5b5060016000819055506107ee806100286000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635eda170b1461005157806371ca337d1461006d578063b2237ba31461008b578063c54f8c09146100a7575b600080fd5b61006b600480360381019061006691906104bf565b6100c3565b005b610075610239565b6040516100829190610648565b60405180910390f35b6100a560048036038101906100a09190610512565b61023f565b005b6100c160048036038101906100bc9190610458565b610249565b005b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016100fe91906105ad565b60206040518083038186803b15801561011657600080fd5b505afa15801561012a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014e919061053f565b9050600080548461015f9190610674565b9050818111156101a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019b90610628565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663095ea7b384836040518363ffffffff1660e01b81526004016101df9291906105ff565b602060405180830381600087803b1580156101f957600080fd5b505af115801561020d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610231919061042b565b505050505050565b60005481565b8060008190555050565b60008473ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161028491906105ad565b60206040518083038186803b15801561029c57600080fd5b505afa1580156102b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d4919061053f565b905060008054846102e59190610674565b90508181111561032a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032190610628565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd8487846040518463ffffffff1660e01b8152600401610367939291906105c8565b602060405180830381600087803b15801561038157600080fd5b505af1158015610395573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b9919061042b565b50505050505050565b6000813590506103d18161075c565b92915050565b6000815190506103e681610773565b92915050565b6000813590506103fb8161078a565b92915050565b600081359050610410816107a1565b92915050565b600081519050610425816107a1565b92915050565b6000602082840312156104415761044061072e565b5b600061044f848285016103d7565b91505092915050565b600080600080608085870312156104725761047161072e565b5b6000610480878288016103ec565b9450506020610491878288016103c2565b93505060406104a287828801610401565b92505060606104b3878288016103c2565b91505092959194509250565b6000806000606084860312156104d8576104d761072e565b5b60006104e6868287016103ec565b93505060206104f786828701610401565b9250506040610508868287016103c2565b9150509250925092565b6000602082840312156105285761052761072e565b5b600061053684828501610401565b91505092915050565b6000602082840312156105555761055461072e565b5b600061056384828501610416565b91505092915050565b610575816106a5565b82525050565b6000610588601783610663565b915061059382610733565b602082019050919050565b6105a7816106f5565b82525050565b60006020820190506105c2600083018461056c565b92915050565b60006060820190506105dd600083018661056c565b6105ea602083018561056c565b6105f7604083018461059e565b949350505050565b6000604082019050610614600083018561056c565b610621602083018461059e565b9392505050565b600060208201905081810360008301526106418161057b565b9050919050565b600060208201905061065d600083018461059e565b92915050565b600082825260208201905092915050565b600061067f826106f5565b915061068a836106f5565b92508261069a576106996106ff565b5b828204905092915050565b60006106b0826106d5565b9050919050565b60008115159050919050565b60006106ce826106a5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b7f4e6f7420656e6f75676820455243323020546f6b656e73000000000000000000600082015250565b610765816106a5565b811461077057600080fd5b50565b61077c816106b7565b811461078757600080fd5b50565b610793816106c3565b811461079e57600080fd5b50565b6107aa816106f5565b81146107b557600080fd5b5056fea26469706673582212205e471d023861a14e968c66fb7a4161208491c93add49108968c5a6ec30698cde64736f6c63430008070033";

    public StandardPlayToEarnContractDeployment() : base(BYTECODE)
    {
    }
}

/*[Function("setRatio", "")]
public class SetRatioFunction : FunctionMessage
{
    [Parameter("uint256", "newRatio", 1)]
    public BigInteger newRatio { get; set; }
}*/

// GameManagerPlayToEarn used method
[Function("claim", "")]
public class ClaimFunction : FunctionMessage
{
    [Parameter("address", "token", 1)]
    public string token { get; set; }

    [Parameter("address", "to", 2)]
    public string to { get; set; }

    [Parameter("uint256", "amount", 3)]
    public BigInteger amount { get; set; }

    [Parameter("address", "origin", 4)]
    public string origin { get; set; }
}

public class GameManagerPlayToEarn : MonoBehaviour
{
    public string playToEarnContractAddress;

    private string gameDeveloperPrivateKey = "";

    private int chainId;
    private string rpcUrl;

    // Start is called before the first frame update
    void Start()
    {
        this.chainId = Constants.AVALANCHE_TESTNET_CHAIN_ID;
        this.rpcUrl = Constants.AVALANCHE_TESTNET_RPC_URL;

        LoadPrivateKey();
        LoadPlayToEarnContractData();
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    private bool LoadPrivateKey()
    {
        if (FileManager.LoadFromFile("Wallet Acccount Data.dat", out var json))
        {
            WalletAcccountData walletAcccountData = new WalletAcccountData();
            walletAcccountData.LoadFromJson(json);

            LoadFromWalletAcccountData(walletAcccountData);
            return true;
        }
        else
        {
            Debug.Log("No File");
            return false;
        }
    }

    public void LoadFromWalletAcccountData(WalletAcccountData walletAcccountData)
    {
        // Set local variables
        this.gameDeveloperPrivateKey = walletAcccountData.privateKey;

        Debug.Log(this.gameDeveloperPrivateKey);
    }

    private bool LoadPlayToEarnContractData()
    {
        if (FileManager.LoadFromFile("Play To Earn Contract Data.dat", out var json))
        {
            PlayToEarnContractData playToEarnContractData = new PlayToEarnContractData();
            playToEarnContractData.LoadFromJson(json);

            LoadFromPlayToEarnContractData(playToEarnContractData);
            return true;
        }
        else
        {
            displayEmptyTextPlayToEarnContractData();
            Debug.Log("No File");
            return false;
        }
    }

    public void LoadFromPlayToEarnContractData(PlayToEarnContractData playToEarnContractData)
    {
        // Set local variables
        this.playToEarnContractAddress = playToEarnContractData.contractAddress;
        Debug.Log(playToEarnContractData.contractAddress);
    }

    public void displayEmptyTextPlayToEarnContractData()
    {
        Debug.Log("Not yet created a Play To Earn Contract.\nCreate a new Play To Earn Contract First.");
    }
}
