using System;
using System.Text;
using System.Numerics;
using System.Threading.Tasks;

using UnityEngine;

using Nethereum.Web3;
using Nethereum.Util;
using Nethereum.ABI;
using Nethereum.Contracts;
using Nethereum.Web3.Accounts;
using Nethereum.Hex.HexConvertors.Extensions;
using Nethereum.ABI.FunctionEncoding.Attributes;

// ERC20TokenManagerEditor used method
public class StandardERC20TokenDeployment : ContractDeploymentMessage
{
    public static string BYTECODE =
        "60806040523480156200001157600080fd5b50604051620019233803806200192383398181016040528101906200003791906200033a565b6040518060400160405280600481526020017f476f6c64000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f474c4400000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000bb92919062000273565b508060049080519060200190620000d492919062000273565b505050620000e93382620000f060201b60201c565b5062000537565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000163576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200015a90620003a4565b60405180910390fd5b62000177600083836200026960201b60201c565b80600260008282546200018b9190620003f4565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620001e29190620003f4565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002499190620003c6565b60405180910390a362000265600083836200026e60201b60201c565b5050565b505050565b505050565b82805462000281906200045b565b90600052602060002090601f016020900481019282620002a55760008555620002f1565b82601f10620002c057805160ff1916838001178555620002f1565b82800160010185558215620002f1579182015b82811115620002f0578251825591602001919060010190620002d3565b5b50905062000300919062000304565b5090565b5b808211156200031f57600081600090555060010162000305565b5090565b60008151905062000334816200051d565b92915050565b600060208284031215620003535762000352620004ef565b5b6000620003638482850162000323565b91505092915050565b60006200037b601f83620003e3565b91506200038882620004f4565b602082019050919050565b6200039e8162000451565b82525050565b60006020820190508181036000830152620003bf816200036c565b9050919050565b6000602082019050620003dd600083018462000393565b92915050565b600082825260208201905092915050565b6000620004018262000451565b91506200040e8362000451565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000446576200044562000491565b5b828201905092915050565b6000819050919050565b600060028204905060018216806200047457607f821691505b602082108114156200048b576200048a620004c0565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b620005288162000451565b81146200053457600080fd5b50565b6113dc80620005476000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a08231146101a357806395d89b41146101d3578063a457c2d7146101f1578063a9059cbb14610221578063aad3ec9614610251578063dd62ed3e14610281576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce567146101555780633950935114610173575b600080fd5b6100c16102b1565b6040516100ce9190610df4565b60405180910390f35b6100f160048036038101906100ec9190610c1b565b610343565b6040516100fe9190610dd9565b60405180910390f35b61010f610366565b60405161011c9190610f16565b60405180910390f35b61013f600480360381019061013a9190610bc8565b610370565b60405161014c9190610dd9565b60405180910390f35b61015d61039f565b60405161016a9190610f31565b60405180910390f35b61018d60048036038101906101889190610c1b565b6103a8565b60405161019a9190610dd9565b60405180910390f35b6101bd60048036038101906101b89190610b5b565b6103df565b6040516101ca9190610f16565b60405180910390f35b6101db610427565b6040516101e89190610df4565b60405180910390f35b61020b60048036038101906102069190610c1b565b6104b9565b6040516102189190610dd9565b60405180910390f35b61023b60048036038101906102369190610c1b565b610530565b6040516102489190610dd9565b60405180910390f35b61026b60048036038101906102669190610c1b565b610553565b6040516102789190610dd9565b60405180910390f35b61029b60048036038101906102969190610b88565b6105c0565b6040516102a89190610f16565b60405180910390f35b6060600380546102c090611077565b80601f01602080910402602001604051908101604052809291908181526020018280546102ec90611077565b80156103395780601f1061030e57610100808354040283529160200191610339565b820191906000526020600020905b81548152906001019060200180831161031c57829003601f168201915b5050505050905090565b60008061034e610647565b905061035b81858561064f565b600191505092915050565b6000600254905090565b60008061037b610647565b905061038885828561081a565b6103938585856108a6565b60019150509392505050565b60006012905090565b6000806103b3610647565b90506103d48185856103c585896105c0565b6103cf9190610f68565b61064f565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461043690611077565b80601f016020809104026020016040519081016040528092919081815260200182805461046290611077565b80156104af5780601f10610484576101008083540402835291602001916104af565b820191906000526020600020905b81548152906001019060200180831161049257829003601f168201915b5050505050905090565b6000806104c4610647565b905060006104d282866105c0565b905083811015610517576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050e90610ef6565b60405180910390fd5b610524828686840361064f565b60019250505092915050565b60008061053b610647565b90506105488185856108a6565b600191505092915050565b6000600a821015610599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059090610e96565b60405180910390fd5b6000600a836105a89190610fbe565b90506105b48482610530565b50600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b690610ed6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561072f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072690610e36565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161080d9190610f16565b60405180910390a3505050565b600061082684846105c0565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108a05781811015610892576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088990610e56565b60405180910390fd5b61089f848484840361064f565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610916576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090d90610eb6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610986576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097d90610e16565b60405180910390fd5b610991838383610b27565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0e90610e76565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610aaa9190610f68565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b0e9190610f16565b60405180910390a3610b21848484610b2c565b50505050565b505050565b505050565b600081359050610b4081611378565b92915050565b600081359050610b558161138f565b92915050565b600060208284031215610b7157610b70611136565b5b6000610b7f84828501610b31565b91505092915050565b60008060408385031215610b9f57610b9e611136565b5b6000610bad85828601610b31565b9250506020610bbe85828601610b31565b9150509250929050565b600080600060608486031215610be157610be0611136565b5b6000610bef86828701610b31565b9350506020610c0086828701610b31565b9250506040610c1186828701610b46565b9150509250925092565b60008060408385031215610c3257610c31611136565b5b6000610c4085828601610b31565b9250506020610c5185828601610b46565b9150509250929050565b610c6481611001565b82525050565b6000610c7582610f4c565b610c7f8185610f57565b9350610c8f818560208601611044565b610c988161113b565b840191505092915050565b6000610cb0602383610f57565b9150610cbb8261114c565b604082019050919050565b6000610cd3602283610f57565b9150610cde8261119b565b604082019050919050565b6000610cf6601d83610f57565b9150610d01826111ea565b602082019050919050565b6000610d19602683610f57565b9150610d2482611213565b604082019050919050565b6000610d3c600e83610f57565b9150610d4782611262565b602082019050919050565b6000610d5f602583610f57565b9150610d6a8261128b565b604082019050919050565b6000610d82602483610f57565b9150610d8d826112da565b604082019050919050565b6000610da5602583610f57565b9150610db082611329565b604082019050919050565b610dc48161102d565b82525050565b610dd381611037565b82525050565b6000602082019050610dee6000830184610c5b565b92915050565b60006020820190508181036000830152610e0e8184610c6a565b905092915050565b60006020820190508181036000830152610e2f81610ca3565b9050919050565b60006020820190508181036000830152610e4f81610cc6565b9050919050565b60006020820190508181036000830152610e6f81610ce9565b9050919050565b60006020820190508181036000830152610e8f81610d0c565b9050919050565b60006020820190508181036000830152610eaf81610d2f565b9050919050565b60006020820190508181036000830152610ecf81610d52565b9050919050565b60006020820190508181036000830152610eef81610d75565b9050919050565b60006020820190508181036000830152610f0f81610d98565b9050919050565b6000602082019050610f2b6000830184610dbb565b92915050565b6000602082019050610f466000830184610dca565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610f738261102d565b9150610f7e8361102d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fb357610fb26110a9565b5b828201905092915050565b6000610fc98261102d565b9150610fd48361102d565b925082610fe457610fe36110d8565b5b828204905092915050565b6000610ffa8261100d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015611062578082015181840152602081019050611047565b83811115611071576000848401525b50505050565b6000600282049050600182168061108f57607f821691505b602082108114156110a3576110a2611107565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f62616c616e6365206973206c6f77000000000000000000000000000000000000600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b61138181610fef565b811461138c57600080fd5b50565b6113988161102d565b81146113a357600080fd5b5056fea2646970667358221220a5e48120bfa16ef5d9fd6525d5e522b05027f91ad66fbab079ff9673f3b8a33064736f6c63430008070033";

    public StandardERC20TokenDeployment() : base(BYTECODE)
    {
    }

    [Parameter("uint256", "initialSupply")]
    public BigInteger TotalSupply { get; set; }
}

// ERC20TokenExplorerEditor used methods
[Function("balanceOf", "uint256")]
public class BalanceOfFunction : FunctionMessage
{
    [Parameter("address", "_owner", 1)]
    public string Owner { get; set; }
}

[Function("name", "string")]
public class NameOfFunction : FunctionMessage
{

}

[Function("symbol", "string")]
public class SymbolOfFunction : FunctionMessage
{

}

[Function("totalSupply", "uint256")]
public class TotalSupplyOfFunction : FunctionMessage
{

}

// GameManagerERC20 used methods
/*[Function("transfer", "bool")]
public class TransferFunction : FunctionMessage
{
    [Parameter("address", "_to", 1)]
    public string To { get; set; }

    [Parameter("uint256", "_value", 2)]
    public BigInteger TokenAmount { get; set; }
}*/

[Function("approve", "bool")]
public class ApproveFunctionERC20 : FunctionMessage
{
    [Parameter("address", "_to", 1)]
    public string spender { get; set; }

    [Parameter("uint256", "_value", 2)]
    public BigInteger amount { get; set; }
}

[Function("allowance", "uint256")]
public class AllowanceFunctionERC20 : FunctionMessage
{
    [Parameter("address", "owner", 1)]
    public string owner { get; set; }

    [Parameter("address", "spender", 2)]
    public string spender { get; set; }
}

public class GameManagerERC20 : MonoBehaviour
{
    public string transferingAmount = "0";

    public string transferingERC20TokenContractAddress = "";

    private string gameDeveloperPrivateKey = "";

    private int chainId;
    private string rpcUrl;

    public WalletConnectClient walletConnectClient;
    public GameManagerPlayToEarn gameManagerPlayToEarn;

    // Start is called before the first frame update
    void Start()
    {
        this.chainId = Constants.AVALANCHE_TESTNET_CHAIN_ID;
        this.rpcUrl = Constants.AVALANCHE_TESTNET_RPC_URL;

        LoadPrivateKey();
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    public async void ClaimErc20()
    {
        /*// Approve ERC20 Token to claim
        // Using ERC20 Token deployer account - Developer
        await DeveloperApproveERC20(gameManagerPlayToEarn.playToEarnContractAddress, UInt64.Parse(this.transferingAmount), this.transferingERC20TokenContractAddress);*/

        // Claim ERC20
        var account = new Account(this.gameDeveloperPrivateKey, this.chainId);
        string gameDeveloperPublicKey = account.Address;

        await PlayerClaimERC20(this.transferingERC20TokenContractAddress, walletConnectClient.accountPublicKey, UInt64.Parse(this.transferingAmount), gameDeveloperPublicKey);
    }

    private bool LoadPrivateKey()
    {
        if (FileManager.LoadFromFile("Wallet Acccount Data.dat", out var json))
        {
            WalletAcccountData walletAcccountData = new WalletAcccountData();
            walletAcccountData.LoadFromJson(json);

            LoadFromWalletAcccountData(walletAcccountData);
            return true;
        }
        else
        {
            Debug.Log("No File");
            return false;
        }
    }

    public void LoadFromWalletAcccountData(WalletAcccountData walletAcccountData)
    {
        // Set local variables
        this.gameDeveloperPrivateKey = walletAcccountData.privateKey;
    }

    /*public async Task<bool> DeveloperApproveERC20(string spender, BigInteger amount, string transferingERC20TokenContractAddress)
    { 
        var account = new Account(this.gameDeveloperPrivateKey, this.chainId);
        var web3 = new Web3(account, this.rpcUrl);

        var functionMessage = new ApproveFunctionERC20()
        {
            spender = spender,
            amount = amount
        };

        var handler = web3.Eth.GetContractTransactionHandler<ApproveFunctionERC20>();
        var receipt = await handler.SendRequestAndWaitForReceiptAsync(transferingERC20TokenContractAddress, functionMessage);

        Debug.Log("Approve Successful");
        return true;
    }*/

    public async Task<bool> PlayerClaimERC20(string transferingERC20Token, string gamePlayerPublicKey, BigInteger transferingAmount, string gameDeveloperPublicKey)
    {
        string functionSignature = "claim(address,address,uint256,address)";
        var functionMessage = new ClaimFunction()
        {
            token = transferingERC20Token,
            to = gamePlayerPublicKey,
            amount = transferingAmount,
            origin = gameDeveloperPublicKey
        };

        byte[] value = Encoding.ASCII.GetBytes(functionSignature);
        var hash = new Sha3Keccack().CalculateHash(value);
        var methodSignature = hash.ToHex();
        var methodSignature4bytes = methodSignature.Substring(0, 8);

        var abiEncode = new ABIEncode();
        var parameterEncoding = abiEncode.GetABIParamsEncoded(functionMessage).ToHex();

        var completeDataHex = "0x" + methodSignature4bytes + parameterEncoding;

        await walletConnectClient.SendTransactionCustom(completeDataHex, walletConnectClient.accountPublicKey, gameManagerPlayToEarn.playToEarnContractAddress, this.chainId);

        Debug.Log("Claim Successful");
        return true;
    }

    public async Task<bool> PlayerApproveERC20(string spender, BigInteger amount, string transferingERC20TokenContractAddress)
    {
        string functionSignature = "approve(address,uint256)";

        var functionMessage = new ApproveFunctionERC20()
        {
            spender = spender,
            amount = amount
        };

        byte[] value = Encoding.ASCII.GetBytes(functionSignature);
        var hash = new Sha3Keccack().CalculateHash(value);
        var methodSignature = hash.ToHex();
        var methodSignature4bytes = methodSignature.Substring(0, 8);

        var abiEncode = new ABIEncode();
        var parameterEncoding = abiEncode.GetABIParamsEncoded(functionMessage).ToHex();

        var completeDataHex = "0x" + methodSignature4bytes + parameterEncoding;

        await walletConnectClient.SendTransactionCustom(completeDataHex, walletConnectClient.accountPublicKey, transferingERC20TokenContractAddress, this.chainId);

        Debug.Log("Approve Successful");
        return true;
    }

    public async Task<BigInteger> getAllowance(string owner, string spender, string contractAddress)
    {
        var web3 = new Web3(rpcUrl);

        var functionMessage = new AllowanceFunctionERC20()
        {
            owner = owner,
            spender = spender
        };

        var handler = web3.Eth.GetContractQueryHandler<AllowanceFunctionERC20>();
        var result = await handler.QueryAsync<BigInteger>(contractAddress, functionMessage);

        return result;
    }
}
